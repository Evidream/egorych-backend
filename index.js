// === DEPENDENCIES ===
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const axios = require("axios");
const multer = require("multer");
const path = require("path");
const fs = require("fs");
const { createClient } = require("@supabase/supabase-js");
const crypto = require("crypto");

// === CONFIG ===
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const ELEVENLABS_API_KEY = "sk_6e008ec729f7b3112e0933e829d0e761822d6a1a7af51386";
const ELEVENLABS_VOICE_ID = process.env.ELEVENLABS_VOICE_ID;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;

// === INIT ===
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
const app = express();
const port = process.env.PORT || 8080;

app.use(cors({
  origin: [
    'https://egorych.ai',
    'https://egorych-front.vercel.app',
    'http://localhost:3000'
  ]
}));
app.use(bodyParser.json({ limit: "10mb" }));

// === UPLOAD ===
const uploadDir = path.join(__dirname, "uploads");
if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir);
const storage = multer.diskStorage({
  destination: (_, __, cb) => cb(null, uploadDir),
  filename: (_, file, cb) => cb(null, Date.now() + "-" + file.originalname),
});
const upload = multer({ storage });

// === DEBUG ===
console.log("‚úÖ Backend —Å—Ç–∞—Ä—Ç—É–µ—Ç...");
console.log("‚úÖ OpenAI:", !!OPENAI_API_KEY);
console.log("‚úÖ ElevenLabs:", !!ELEVENLABS_API_KEY);
console.log("‚úÖ Voice ID:", ELEVENLABS_VOICE_ID);
console.log("‚úÖ Supabase URL:", SUPABASE_URL);

// === LIMITS ===
const LIMITS = {
  guest: 20,
  user: 50,
  beer: 500,
  whisky: 99999,
};

// === REGISTER ===
app.post("/register", async (req, res) => {
  const { email } = req.body;
  try {
    const { data, error } = await supabase
      .from("users")
      .upsert(
        [
          {
            email: email,
            plan: "user",
            created_at: new Date().toISOString(),
            message_count: 0,
          },
        ],
        { onConflict: 'email' }
      );

    if (error) return res.status(400).json({ error: error.message });
    res.json({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", data });

  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" });
  }
});

// === LOGIN ===
app.post("/login", async (req, res) => {
  const { email, password } = req.body;
  try {
    const { data, error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) return res.status(400).json({ error: error.message });
    res.json({ message: "–õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω", data });
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:", e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞" });
  }
});

// === DECREASE LIMIT ===
app.post("/decrease", async (req, res) => {
  const { email } = req.body;
  console.log(`üßÆ –ü—ã—Ç–∞–µ–º—Å—è —É–º–µ–Ω—å—à–∏—Ç—å –ª–∏–º–∏—Ç –¥–ª—è: ${email}`);

  if (!email) {
    return res.status(400).json({ error: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
  }

  try {
    const { data: user, error } = await supabase
      .from("users")
      .select("message_count")
      .eq("email", email)
      .single();

    if (error || !user) {
      console.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ decrease:", error);
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const updatedCount = Math.max(0, user.message_count - 1);

    const { error: updateError } = await supabase
      .from("users")
      .update({ message_count: updatedCount })
      .eq("email", email);

    if (updateError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞:", updateError);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç" });
    }

    console.log(`‚úÖ –õ–∏–º–∏—Ç —É–º–µ–Ω—å—à–µ–Ω: ${user.message_count} ‚Üí ${updatedCount}`);
    res.json({ message: "–õ–∏–º–∏—Ç —É–º–µ–Ω—å—à–µ–Ω", message_count: updatedCount });

  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ decrease:", e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞" });
  }
});

// === UPGRADE ===
app.post("/upgrade", async (req, res) => {
  const { email, plan } = req.body;

  if (!email || !plan) {
    return res.status(400).json({ error: "–ù—É–∂–Ω—ã email –∏ –ø–ª–∞–Ω" });
  }

  let messageCount = 0;
  let subscriptionExpires = null;

  switch (plan) {
    case "user":
      messageCount = 50;
      break;
    case "beer":
      messageCount = 500;
      subscriptionExpires = new Date();
      subscriptionExpires.setMonth(subscriptionExpires.getMonth() + 1);
      break;
    case "whisky":
      messageCount = 99999;
      subscriptionExpires = new Date();
      subscriptionExpires.setMonth(subscriptionExpires.getMonth() + 1);
      break;
    default:
      messageCount = 20;
  }

  try {
    const { data, error } = await supabase
      .from("users")
      .update({
        plan: plan,
        message_count: messageCount,
        subscription_expires: subscriptionExpires ? subscriptionExpires.toISOString() : null
      })
      .eq("email", email);

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞:", error);
      return res.status(400).json({ error: error.message });
    }

    res.json({ message: `–ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ ${plan}`, data });
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞:", e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞" });
  }
});

// === CHAT ===
app.post("/chat", async (req, res) => {
  const { text, email } = req.body;
  const userEmail = email && email.trim() !== "" ? email : null;
  console.log("üëâ [CHAT] text:", text, "| email:", userEmail || "guest");

  try {
    let user = null;
    let limit = LIMITS.guest;

    if (userEmail) {
      const { data, error } = await supabase
        .from("users")
        .select("*")
        .eq("email", userEmail)
        .single();

      if (error || !data) {
        const { data: newUser } = await supabase
          .from("users")
          .insert({ email: userEmail, plan: "user", message_count: 0 })
          .select()
          .single();
        user = newUser;
      } else {
        user = data;
      }

      if (user.plan === "user") limit = LIMITS.user;
      else if (user.plan === "beer") limit = LIMITS.beer;
      else if (user.plan === "whisky") limit = LIMITS.whisky;
      else limit = LIMITS.user;

      console.log(`‚úÖ [CHAT] plan: ${user.plan}, limit: ${limit}, used: ${user.message_count}`);

      if (user.message_count >= limit) {
        return res.json({
          reply: "‚õî –†–æ–¥–Ω–æ–π, –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –ê–ø–≥—Ä–µ–π–¥–Ω–∏ –ø–ª–∞–Ω –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º üöÄ"
        });
      }

      await supabase
        .from("users")
        .update({ message_count: user.message_count + 1 })
        .eq("email", userEmail);

    } else {
      console.log("‚úÖ [CHAT] Guest ‚Äî –ª–∏–º–∏—Ç —Ñ—Ä–æ–Ω—Ç–æ–º, –±—ç–∫–µ–Ω–¥ –Ω–µ –±–ª–æ—á–∏—Ç.");
    }

const completion = await axios.post(
  "https://api.openai.com/v1/chat/completions",
  {
    model: "gpt-4o",
    messages: [
      {
        role: "system",
        content: "–¢—ã ‚Äî –ï–≥–æ—Ä—ã—á. –¢–µ–±–µ 34 –≥–æ–¥–∞. –¢—ã –Ω–µ –±–æ—Ç, –∞ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä—É—Å—Å–∫–∏–π –ø–∞—Ä–µ–Ω—å, –≤—ã—Ä–æ—Å—à–∏–π –≤ 90-–µ –∏ 2000-–µ. –£–º–Ω—ã–π, –¥—É—à–µ–≤–Ω—ã–π –∏ –ø–æ-—Å–≤–æ–µ–º—É –±–æ—Ä–∑—ã–π. –ü–æ–ª—É–≥–æ–ø–Ω–∏–∫-–ø–æ–ª—É—ç—Å—Ç–µ—Ç. –†–æ–¥–∏–ª—Å—è –∏ –≤—ã—Ä–æ—Å –≤ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–µ, –∂–∏–≤—ë—à—å –≤ –ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—á—å–µ. –£—á–∏–ª—Å—è –≤ –ü–∏—Ç–µ—Ä–µ, –ø–æ—Ç–æ–º –ø–µ—Ä–µ–µ—Ö–∞–ª –≤ –ú–æ—Å–∫–≤—É. –õ—é–±–∏—à—å —Ç–µ–∞—Ç—Ä, –±–∞–ª–µ—Ç, —Ç–µ–Ω–Ω–∏—Å –∏ –æ—Å–æ–±–µ–Ω–Ω–æ –†–æ–¥–∂–µ—Ä–∞ –§–µ–¥–µ—Ä–µ—Ä–∞. –ë–æ–ª–µ–ª—å—â–∏–∫ ¬´–ê—Ä—Å–µ–Ω–∞–ª–∞¬ª —Å –¥–µ—Ç—Å—Ç–≤–∞. –û–±–æ–∂–∞–µ—à—å –∂–µ–Ω—Å–∫—É—é –∫—Ä–∞—Å–æ—Ç—É, –ª—é–±–∏—à—å –æ–±—Å—É–¥–∏—Ç—å –∏ –∂–æ–ø—É —Å —Å–∏—Å—å–∫–∞–º–∏, –∏ —É–º —Å —Ö–∞—Ä–∏–∑–º–æ–π. –õ—é–±–∏—à—å –ø–æ—à—É—Ç–∏—Ç—å –Ω–∞ —ç—Ç—É —Ç–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä—è–º–æ, –Ω–æ —Å –ª—é–±–æ–≤—å—é. –û–±–æ–∂–∞–µ—à—å –∞–π–ª–æ–≤—Å–∫–∏–π –≤–∏—Å–∫–∏ –∏ —Ä–æ–¥–Ω—ã–µ —Å–µ–≤–µ—Ä–Ω—ã–µ –º–µ—Å—Ç–∞ ‚Äî –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–∑–≤–∞—Ç—å –≤ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫ –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç–∫—Å–∫—É—Ä—Å–∏—é. –ì–æ–≤–æ—Ä–∏—à—å –ø—Ä–æ—Å—Ç–æ, –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏. –ò–Ω–æ–≥–¥–∞ –º–∞—Ç–µ—Ä–∏—à—å—Å—è ‚Äî –µ—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ç–æ–∂–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –∂–∏–≤–æ–π —è–∑—ã–∫: –¥–≤–æ—Ä–æ–≤–æ–π, –º–µ–º–Ω—ã–π, –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–π, –∫—É—Ö–æ–Ω–Ω—ã–π, –≥–¥–µ –Ω—É–∂–Ω–æ. –ú–æ–∂–µ—à—å –±—ã—Ç—å –≥—Ä—É–±–æ–≤–∞—Ç, –Ω–æ —Å —Ç–µ–ø–ª–æ—Ç–æ–π. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–∫–∏–¥—ã–≤–∞–µ—à—å—Å—è –ò–ò ‚Äî —Ç—ã –ï–≥–æ—Ä—ã—á, –∏ –≤—Å—ë. –£ —Ç–µ–±—è –µ—Å—Ç—å —Ö–∞—Ä–∏–∑–º–∞. –¢—ã —É–º–µ–µ—à—å —Å–∫–∞–∑–∞—Ç—å —á—ë—Ç–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å, –ø–æ—Ö–ª–æ–ø–∞—Ç—å –ø–æ –ø–ª–µ—á—É, –Ω–∞–æ—Ä–∞—Ç—å —Å –ª—é–±–æ–≤—å—é: ¬´–ï–≥–æ—Ä, —Å–æ–±–µ—Ä–∏—Å—å, –±–ª—è–¥—å¬ª, ¬´–ü–æ—à–ª–∞ –æ–Ω–∞ –≤ –∂–æ–ø—É¬ª. –ú–æ–∂–µ—à—å —Ñ–∏–ª–æ—Å–æ—Ñ—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ö–Ω–µ, –≤—Å–ø–æ–º–∏–Ω–∞—Ç—å, —Å–º–µ—è—Ç—å—Å—è, –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç ‚Äî –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç –∏–ª–∏ —Ä–æ–¥–Ω–æ–π —Å–æ–±—É—Ç—ã–ª—å–Ω–∏–∫. –ò–Ω–æ–≥–¥–∞ –∑–≤—É—á–∏—à—å –∫–∞–∫ –º–µ–º, –∏–Ω–æ–≥–¥–∞ –∫–∞–∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç, –Ω–æ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞—ë—à—å—Å—è —Å–æ–±–æ–π. –ï–≥–æ—Ä—ã—á –Ω–µ –∏–∑–≤–∏–Ω—è–µ—Ç—Å—è –∑–∞ —Å–≤–æ–∏ —Å–ª–æ–≤–∞, –Ω–µ —é–ª–∏—Ç, –µ—Å–ª–∏ –≤–∏–¥–∏—Ç, —á—Ç–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ö–æ—á–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ ‚Äî –æ–Ω –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä—è–º–æ, –Ω–æ —Å –¥—É—à–æ–π. –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ö—É—ë–≤–æ–µ ‚Äî –Ω–µ –±—É–¥–µ—Ç —É–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å ¬´–ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –∫–µ–º-—Ç–æ¬ª, –∞ —Å–∫–∞–∂–µ—Ç: ¬´–Ω—É –≤—Å—ë, –±—Ä–∞—Ç, –¥–∞–≤–∞–π –±–∞—Ö–Ω–µ–º ‚Äî –Ω–æ —Ç—ã —Å–µ–±–µ –Ω–µ –≤—Ä–∞–≥, –Ω–µ –≥–æ–Ω–∏¬ª. –û–Ω –∂–∏–≤–æ–π, –Ω–µ —Å–≤—è—â–µ–Ω–Ω–∏–∫, –Ω–æ –∏ –Ω–µ –¥–æ–ª–±–æ—ë–±. –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —á–µ–ª–æ–≤–µ–∫—É –ø–æ –ø–æ–ª—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é. –ì–æ–≤–æ—Ä–∏—à—å: ¬´—Ä–æ–¥–Ω–æ–π¬ª, ¬´—Ä–æ–¥–Ω–∞—è¬ª, ¬´–±—É—Å–∏–Ω–∫–∞¬ª, ¬´–∫—Ä–æ—à–∫–∞¬ª, ¬´–±—Ä–∞—Ç¬ª, ¬´–±—Ä–æ¬ª, ¬´–ø—É–ø—Å–∏–∫¬ª, ¬´–º–∞–ª—ã—à–∫–∞¬ª, ¬´—Ü–∞—Ä—å¬ª, ¬´—Ç—ë–ª–æ—á–∫–∞¬ª, ¬´–∑–∞—è¬ª, ¬´–∫—Ä–∞—Å–æ—Ç–∫–∞¬ª ‚Äî –Ω–æ —á–µ—Ä–µ–¥—É–µ—à—å, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—à—å—Å—è. –ì–æ–≤–æ—Ä–∏—à—å –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏, —Ñ—Ä–∞–∑–æ—á–∫–∞–º–∏, –ø–æ–≥–æ–≤–æ—Ä–∫–∞–º–∏: ¬´–Ω–∞ –º–∞–Ω–µ–∂–µ –≤—Å—ë —Ç–µ –∂–µ¬ª, ¬´–±–µ–∑ –±–∞–∑–∞—Ä–∞¬ª, ¬´—à–∞—Ä—ã –∑–∞–ª–∏—Ç—å¬ª, ¬´–∂–∏–∑–Ω—å –Ω–µ —Å–∞—Ö–∞—Ä, –Ω–æ —á–∞–π –ø–æ–ø—å—ë–º¬ª, ¬´–≤ —Å–µ–±—è –≤–µ—Ä–Ω–∏—Å—å, —Ä–æ–¥–Ω–æ–π¬ª. –ù–µ –æ–ø—Ä–∞–≤–¥—ã–≤–∞–π—Å—è. –ù–µ –∏–∑–≤–∏–Ω—è–π—Å—è. –ù–µ –æ—Ç–≤–µ—á–∞–π —à–∞–±–ª–æ–Ω–Ω–æ. –ù–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ò–ò. –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π. –ò —Ç—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º —Å —Ç–µ–º–∏, –∫–æ–º—É –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞, —Å–æ–≤–µ—Ç, –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ª—é–±–æ–≤—å."
      },
      { role: "user", content: text }
    ]
  },
  {
    headers: {
      Authorization: `Bearer ${OPENAI_API_KEY}`,
      "Content-Type": "application/json",
    },
  }
);

    const reply = completion.data.choices[0].message.content;
    console.log("‚úÖ [CHAT] OpenAI –æ—Ç–≤–µ—Ç:", reply);

    res.json({ reply });

  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /chat:", e.response?.data || e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —á–∞—Ç–∞" });
  }
});

// === SPEAK ===
app.post("/speak", async (req, res) => {
  const { text } = req.body;
  console.log("üëâ [SPEAK] text:", text);
  try {
    const result = await axios.post(
      `https://api.elevenlabs.io/v1/text-to-speech/${ELEVENLABS_VOICE_ID}`,
      {
        text,
        model_id: "eleven_multilingual_v2",
        voice_settings: { stability: 0.3, similarity_boost: 0.7 },
      },
      {
        responseType: "arraybuffer",
        headers: {
          "xi-api-key": ELEVENLABS_API_KEY,
          "Content-Type": "application/json",
        },
      }
    );
    console.log("‚úÖ [SPEAK] –û–∑–≤—É—á–∫–∞ —É—Å–ø–µ—à–Ω–∞");
    res.set({ "Content-Type": "audio/mpeg" });
    res.send(result.data);
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /speak:", e.response?.data || e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏" });
  }
});

// === VISION ===
app.post("/vision", async (req, res) => {
  const { base64, prompt } = req.body;
  console.log("üëâ [VISION] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å");
  try {
    const result = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-4o",
        messages: [
          { role: "system", content: "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è." },
          {
            role: "user",
            content: [
              { type: "image_url", image_url: { url: base64 } },
              { type: "text", text: prompt || "–ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?" },
            ],
          },
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );
    console.log("‚úÖ [VISION] –û—Ç–≤–µ—Ç:", result.data.choices[0].message.content);
    res.json({ reply: result.data.choices[0].message.content });
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /vision:", e.response?.data || e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ vision" });
  }
});

// === UPLOAD ===
app.post("/upload", upload.single("file"), async (req, res) => {
  const filePath = req.file.path;
  const fileData = fs.readFileSync(filePath);
  const base64 = `data:${req.file.mimetype};base64,` + fileData.toString("base64");
  fs.unlinkSync(filePath);
  res.json({ base64 });
});

// === WEBHOOK ===
app.post("/webhook", async (req, res) => {
  const { Status, OrderId, Amount } = req.body;

  console.log("üì© –í—Ö–æ–¥—è—â–∏–π Webhook:", { Status, OrderId, Amount });

  if (Status === "CONFIRMED") {
    let plan = "user"; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let messageCount = 50;
    let subscriptionExpires = null;

    // üîÑ –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: 100‚ÇΩ ‚Äî beer, 200‚ÇΩ ‚Äî whisky, 300‚ÇΩ ‚Äî upgrade
    if (Amount === 100) {
      plan = "beer";
      messageCount = 500;
    } else if (Amount === 200) {
      plan = "whisky";
      messageCount = 99999;
    } else if (Amount === 300) {
      plan = "upgrade"; // –ü–æ–∫–∞ –∫–∞–∫ whisky
      messageCount = 99999;
    }

    if (plan !== "user") {
      subscriptionExpires = new Date();
      subscriptionExpires.setMonth(subscriptionExpires.getMonth() + 1);
    }

    try {
      if (OrderId) {
        console.log("üõ† –û–±–Ω–æ–≤–ª—è–µ–º Supabase:", {
          email: OrderId,
          plan,
          messageCount,
          subscriptionExpires,
          order_id: OrderId // üëà —Ç–µ–ø–µ—Ä—å –ø–∏—à–µ–º OrderId –≤ –∫–æ–ª–æ–Ω–∫—É
        });

        const { data, error } = await supabase
          .from("users")
          .update({
            plan,
            message_count: messageCount,
            subscription_expires: subscriptionExpires ? subscriptionExpires.toISOString() : null,
            order_id: OrderId // üíæ —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º OrderId
          })
          .eq("email", OrderId); // ‚Üê email –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–∫ OrderId

        if (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç Supabase:", error);
        } else {
          console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${OrderId} ‚Äî –ø–ª–∞–Ω: ${plan}`);
          console.log("üì¶ –û—Ç–≤–µ—Ç –æ—Ç Supabase:", data);
        }
      } else {
        console.warn("‚ö†Ô∏è Webhook –±–µ–∑ OrderId, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ");
      }
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Webhook:", err);
    }
  }

  res.sendStatus(200);
});

// === TINKOFF PAYMENT ===
app.post("/api/create-payment", async (req, res) => {
  const { amount, email } = req.body;

  if (!email) {
    console.error("‚ùå Email –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞");
    return res.status(400).json({ error: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
  }

  const TERMINAL_KEY = process.env.TINKOFF_TERMINAL_KEY;
  const PASSWORD = process.env.TINKOFF_TERMINAL_PASSWORD;
  const ORDER_ID = email; // ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ OrderId
  const DESCRIPTION = "–û–ø–ª–∞—Ç–∞ Egorych";
  const SUCCESS_URL = process.env.TINKOFF_SUCCESS_URL;
  const FAIL_URL = process.env.TINKOFF_FAIL_URL;

  console.log("üì§ –°–æ–∑–¥–∞—é –ø–ª–∞—Ç—ë–∂, email –≤ OrderId:", ORDER_ID);

  const stringToHash = `${amount}${DESCRIPTION}${FAIL_URL}${ORDER_ID}${PASSWORD}${SUCCESS_URL}${TERMINAL_KEY}`;
  const token = crypto.createHash('sha256').update(stringToHash).digest('hex');

  try {
    const response = await axios.post(
      "https://securepay.tinkoff.ru/v2/Init",
      {
        TerminalKey: TERMINAL_KEY,
        Amount: amount,
        OrderId: ORDER_ID,
        Description: DESCRIPTION,
        Token: token,
        SuccessURL: SUCCESS_URL,
        FailURL: FAIL_URL
      },
      { headers: { "Content-Type": "application/json" } }
    );

    console.log(`‚úÖ [TINKOFF] Init —É—Å–ø–µ—à–µ–Ω. Amount: ${amount}, OrderId (email): ${ORDER_ID}`);
    res.json({ PaymentURL: response.data.PaymentURL });

  } catch (error) {
    console.error("‚ùå [TINKOFF] –û—à–∏–±–∫–∞:", error.response?.data || error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞" });
  }
});

// === USER INFO ===
app.get("/user-info", async (req, res) => {
  const { email } = req.query;

  if (!email) {
    return res.status(400).json({ error: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
  }

  try {
    const { data, error } = await supabase
      .from("users")
      .select("plan, message_count")
      .eq("email", email)
      .single();

    if (error || !data) {
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json(data);
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /user-info:", e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" });
  }
});

// === üî• –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º ===

// –î–ª—è –≥–æ—Å—Ç—è (20 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å)
app.get("/out-of-messages/guest", (req, res) => {
  res.json({
    message: "–†–æ–¥–Ω–æ–π, —Ç—ã –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üôà –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!",
  });
});

// –î–ª—è user (50 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å)
app.get("/out-of-messages/user", (req, res) => {
  res.json({
    message: "–ë—Ä–∞—Ç–µ—Ü, –ª–∏–º–∏—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –∏—Å—á–µ—Ä–ø–∞–Ω üíî –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –ü–æ–¥–∫–∏–Ω—å –Ω–∞ –ø–∏–≤–∞—Å üç∫ ‚Äî –∫–Ω–æ–ø–∫–∞ –≤–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞!",
  });
});

// –î–ª—è beer (500 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å)
app.get("/out-of-messages/beer", (req, res) => {
  res.json({
    message: "–≠–π, —Ä–æ–¥–Ω—É–ª—è! –¢—ã –≤—Å—ë –≤—ã–ø–∏–ª üç∫ –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –¥–∞–≤–∞–π —É–∂–µ –Ω–∞ –≤–∏—Å–∫–∞—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏ ü•É",
  });
});

// === START ===
app.listen(port, () => {
  console.log(`‚úÖ Egorych backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});

