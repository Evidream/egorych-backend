// === DEPENDENCIES ===
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const axios = require("axios");
const multer = require("multer");
const path = require("path");
const fs = require("fs");
const { createClient } = require("@supabase/supabase-js");

// === CONFIG ===
const OPENAI_API_KEY = process.env.OPENAI_API_KEY; // ‚úÖ –¢–æ–ª—å–∫–æ –∏–∑ Variables
const ELEVENLABS_API_KEY = "sk_6e008ec729f7b3112e0933e829d0e761822d6a1a7af51386";
const ELEVENLABS_VOICE_ID = process.env.ELEVENLABS_VOICE_ID;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;

// === INIT ===
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
const app = express();
const port = process.env.PORT || 8080;

app.use(cors());
app.use(bodyParser.json({ limit: "10mb" }));

// === UPLOAD ===
const uploadDir = path.join(__dirname, "uploads");
if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir);
const storage = multer.diskStorage({
  destination: (_, __, cb) => cb(null, uploadDir),
  filename: (_, file, cb) => cb(null, Date.now() + "-" + file.originalname),
});
const upload = multer({ storage });

// === DEBUG ===
console.log("‚úÖ Backend —Å—Ç–∞—Ä—Ç—É–µ—Ç...");
console.log("‚úÖ OpenAI:", !!OPENAI_API_KEY);
console.log("‚úÖ ElevenLabs:", !!ELEVENLABS_API_KEY);
console.log("‚úÖ Voice ID:", ELEVENLABS_VOICE_ID);
console.log("‚úÖ Supabase URL:", SUPABASE_URL);

// === LIMITS ===
const LIMITS = {
  guest: 20,
  user: 50,
  beer: 500,
  whisky: 99999,
};

// === REGISTER ===
app.post("/register", async (req, res) => {
  const { email } = req.body;
  try {
    // 1Ô∏è‚É£ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å ‚Äî –∞–ø–¥–µ–π—Ç–∏–º –ø–ª–∞–Ω –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    // 2Ô∏è‚É£ –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Å –ø–ª–∞–Ω–æ–º user –∏ —Å—á—ë—Ç—á–∏–∫–æ–º 0
    const { data, error } = await supabase
      .from("users")
      .upsert(
        [
          {
            email: email,
            plan: "user", // üëà —Ç–µ–ø–µ—Ä—å —Å—Ä–∞–∑—É plan: user
            created_at: new Date().toISOString(),
            message_count: 0, // üëà —Å–±—Ä–∞—Å—ã–≤–∞–µ–º/—Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π
          },
        ],
        { onConflict: 'email' }
      );

    if (error) return res.status(400).json({ error: error.message });
    res.json({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", data });

  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" });
  }
});

// === LOGIN ===
app.post("/login", async (req, res) => {
  const { email, password } = req.body;
  try {
    const { data, error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) return res.status(400).json({ error: error.message });
    res.json({ message: "–õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω", data });
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:", e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞" });
  }
});

// === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô UPGRADE ===
app.post("/upgrade", async (req, res) => {
  const { email, plan } = req.body;

  if (!email || !plan) {
    return res.status(400).json({ error: "–ù—É–∂–Ω—ã email –∏ –ø–ª–∞–Ω" });
  }

  // üîë –ó–∞–¥–∞—ë–º –ª–∏–º–∏—Ç –∏ —Å—Ä–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞
  let messageCount = 0;
  let subscriptionExpires = null;

  switch (plan) {
    case "user":
      messageCount = 50; // –ø—Ä–∏ –∞–ø–≥—Ä–µ–π–¥–µ —Å guest –Ω–∞ user
      break;
    case "beer":
      messageCount = 500;
      subscriptionExpires = new Date();
      subscriptionExpires.setMonth(subscriptionExpires.getMonth() + 1); // +1 –º–µ—Å—è—Ü
      break;
    case "whisky":
      messageCount = 99999;
      subscriptionExpires = new Date();
      subscriptionExpires.setFullYear(subscriptionExpires.getMonth() + 1); // +1 –º–µ—Å—è—Ü
      break;
    default:
      messageCount = 20; // fallback ‚Üí guest
  }

  try {
    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –∏ –ª–∏–º–∏—Ç—ã
    const { data, error } = await supabase
      .from("users")
      .update({
        plan: plan,
        message_count: messageCount, 
        subscription_expires: subscriptionExpires ? subscriptionExpires.toISOString() : null
      })
      .eq("email", email);

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞:", error);
      return res.status(400).json({ error: error.message });
    }

    res.json({ message: `–ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ ${plan}`, data });
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞:", e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞" });
  }
});

// === CHAT (–§–ò–ù–ê–õ FIX CLEAN) ===
app.post("/chat", async (req, res) => {
  const { text, email } = req.body;

  // 1Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º email —á—ë—Ç–∫–æ
  const userEmail = email && email.trim() !== "" ? email : null;
  console.log("üëâ [CHAT] text:", text, "email:", userEmail || "guest");

  try {
    let user = null;

    if (userEmail) {
      // 2Ô∏è‚É£ –ï—Å—Ç—å email ‚Üí —é–∑–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±–∞–∑–µ!
      let { data, error } = await supabase
        .from("users")
        .select("*")
        .eq("email", userEmail)
        .single();

      if (error || !data) {
        // fallback safety: —Å–æ–∑–¥–∞—ë–º —Å plan:user
        const { data: newUser } = await supabase
          .from("users")
          .insert({
            email: userEmail,
            plan: "user",
            message_count: 0,
          })
          .select()
          .single();
        user = newUser;
      } else {
        user = data;
      }
    } else {
      // 3Ô∏è‚É£ –ù–µ—Ç email ‚Üí –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–æ–∫–∞–ª—å–Ω—ã–π guest (–ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase!)
      user = {
        plan: "guest",
        message_count: req.body.localCount || 0 // –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–µ—à—å –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å —Å —Ñ—Ä–æ–Ω—Ç–∞
      };
    }

    // 4Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç
    let limit = LIMITS.user;
    if (user.plan === "guest") limit = LIMITS.guest;
    else if (user.plan === "beer") limit = LIMITS.beer;
    else if (user.plan === "whisky") limit = LIMITS.whisky;

    console.log(`üëâ [CHAT] plan: ${user.plan}, limit: ${limit}, message_count: ${user.message_count}`);

    // 5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if (user.message_count >= limit) {
      return res.json({
        reply: "–°–ª—É—à–∞–π, –∞ —á—ë –º—ã –∫–∞–∫ –Ω–µ —Ä–æ–¥–Ω—ã–µ? –í–∏–¥–∏—à—å –≤–≤–µ—Ä—Ö—É —á—ë—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É? –ñ–º–∏ –∏ –∑–∞—Ä–µ–≥–∞–π—Å—è –ø—ã—Ä–µ–Ω—å–∫–æ ‚Äî —Ç–∞–º —Ä–µ–∞–ª—å–Ω–æ 5 —Å–µ–∫. –ê —è –ø–æ–∫–∞ —Å–±–µ–≥–∞—é –≤ —Ç–æ–ª—á–æ–∫ üòÜ"
      });
    }

    // 6Ô∏è‚É£ –ï—Å–ª–∏ –µ—Å—Ç—å email ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –≤ Supabase
    if (userEmail) {
      await supabase
        .from("users")
        .update({ message_count: user.message_count + 1 })
        .eq("email", userEmail);
    } else {
      // –ù–µ—Ç email ‚Üí —Å—á—ë—Ç—á–∏–∫ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç
    }

    // 7Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –≤ OpenAI
    const completion = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-4o",
        messages: [{ role: "user", content: text }],
      },
      {
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const reply = completion.data.choices[0].message.content;
    console.log("‚úÖ [CHAT] OpenAI –æ—Ç–≤–µ—Ç:", reply);

    // –ï—Å–ª–∏ guest ‚Üí –≤–µ—Ä–Ω—ë–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π localCount
    res.json({
      reply,
      localCount: userEmail ? undefined : user.message_count + 1
    });

  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /chat:", e.response?.data || e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —á–∞—Ç–∞" });
  }
});

// === SPEAK ===
app.post("/speak", async (req, res) => {
  const { text } = req.body;
  console.log("üëâ [SPEAK] text:", text);
  try {
    const result = await axios.post(
      `https://api.elevenlabs.io/v1/text-to-speech/${ELEVENLABS_VOICE_ID}`,
      {
        text,
        model_id: "eleven_multilingual_v2",
        voice_settings: { stability: 0.3, similarity_boost: 0.7 },
      },
      {
        responseType: "arraybuffer",
        headers: {
          "xi-api-key": ELEVENLABS_API_KEY,
          "Content-Type": "application/json",
        },
      }
    );
    console.log("‚úÖ [SPEAK] –û–∑–≤—É—á–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");
    res.set({ "Content-Type": "audio/mpeg" });
    res.send(result.data);
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /speak:", e.response?.data || e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏" });
  }
});

// === VISION ===
app.post("/vision", async (req, res) => {
  const { base64, prompt } = req.body;
  console.log("üëâ [VISION] –ó–∞–ø—Ä–æ—Å vision –ø–æ–ª—É—á–µ–Ω");
  try {
    const result = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-4o",
        messages: [
          { role: "system", content: "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è." },
          {
            role: "user",
            content: [
              { type: "image_url", image_url: { url: base64 } },
              { type: "text", text: prompt || "–ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?" },
            ],
          },
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );
    console.log("‚úÖ [VISION] –û—Ç–≤–µ—Ç:", result.data.choices[0].message.content);
    res.json({ reply: result.data.choices[0].message.content });
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /vision:", e.response?.data || e);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ vision" });
  }
});

// === UPLOAD ===
app.post("/upload", upload.single("file"), async (req, res) => {
  const filePath = req.file.path;
  const fileData = fs.readFileSync(filePath);
  const base64 = `data:${req.file.mimetype};base64,` + fileData.toString("base64");
  fs.unlinkSync(filePath);
  res.json({ base64 });
});

// === WEBHOOK ===
app.post("/webhook", async (req, res) => {
  const { Status, OrderId, Amount } = req.body;
  if (Status === "CONFIRMED") {
    let update = { is_basic: true };
    if (Amount >= 149900) update = { is_premium: true };
    await supabase.from("users").update({ ...update }).eq("email", OrderId);
    console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${OrderId}`);
  }
  res.sendStatus(200);
});

// === TINKOFF CREATE PAYMENT ===
const crypto = require("crypto");

app.post("/api/create-payment", async (req, res) => {
  const { amount } = req.body;

  const TERMINAL_KEY = process.env.TINKOFF_TERMINAL_KEY;
  const PASSWORD = process.env.TINKOFF_TERMINAL_PASSWORD; // —ç—Ç–æ —Ç–≤–æ–π SecretKey!
  const ORDER_ID = Date.now().toString();
  const DESCRIPTION = "–û–ø–ª–∞—Ç–∞ Egorych";

  // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–∞
  const params = {
    Amount: amount,
    Description: DESCRIPTION,
    OrderId: ORDER_ID,
    TerminalKey: TERMINAL_KEY
  };

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏
  const sortedKeys = Object.keys(params).sort();

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  let stringToHash = '';
  sortedKeys.forEach(key => {
    stringToHash += `${key}=${params[key]}`;
  });
  stringToHash += PASSWORD;

  // –•–µ—à–∏—Ä—É–µ–º
  const token = crypto.createHash('sha256').update(stringToHash).digest('hex');

  // ‚úÖ –õ–æ–≥ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–∞–ø–ø–æ—Ä—Ç–∞!
  console.log("‚úÖ [TINKOFF] Init request JSON:", {
    ...params,
    Token: token,
    SuccessURL: process.env.TINKOFF_SUCCESS_URL,
    FailURL: process.env.TINKOFF_FAIL_URL
  });

  try {
    const response = await axios.post(
      "https://securepay.tinkoff.ru/v2/Init",
      {
        ...params,
        Token: token,
        SuccessURL: process.env.TINKOFF_SUCCESS_URL,
        FailURL: process.env.TINKOFF_FAIL_URL
      },
      {
        headers: { "Content-Type": "application/json" }
      }
    );

    console.log("‚úÖ [TINKOFF] Init response:", response.data);

    res.json({
      PaymentURL: response.data.PaymentURL
    });

  } catch (error) {
    console.error("‚ùå [TINKOFF] –û—à–∏–±–∫–∞:", error.response?.data || error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞" });
  }
});
// === START ===
app.listen(port, () => {
  console.log(`‚úÖ Egorych backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});
